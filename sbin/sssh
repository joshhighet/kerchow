#!/bin/zsh
# multi-host ssh controller

clear
autoload colors; colors
error() { echo "${fg[red]}$@${reset_color}" >&2 }
warn() { echo "${fg[yellow]}$@${reset_color}" >&2 }
good() { echo "${fg[green]}$@${reset_color}" >&2 }

banner=`echo \
'CiBfICAgICBfICAgICAgIF8gICAgICAgICAgICAgICAgXwp8IHxfXyAoXykgX18g\
X3wgfF9fICBfIF9fICAgX19ffCB8Xwp8ICdfIFx8IHwvIF9gIHwgJ18gXHwgJ18gX\
CAvIF8gXCBfX3wKfCB8IHwgfCB8IChffCB8IHwgfCB8IHwgfCB8ICBfXy8gfF8KfF\
98IHxffF98XF9fLCB8X3wgfF98X3wgfF98XF9fX3xcX198CiAgICAgICAgIHxfX18\
vCSAgICAgIAkgIHNoZWxsanVtcAoK' \
| base64 --decode`
echo "${fg[green]}$banner${reset_color}"
echo

if [ -f ~/.kerchow-hosts ]; then
    hosts=($(cat ~/.kerchow-hosts))
else
    error "config file missing, create ~/.kerchow-hosts with one hostname per line."
    exit 1
fi

process_host() {
    local host="$1"
    local usrcommand="$2"
    resolve_address=$(host "${host}" | awk '/has address/ { print $4 }')
    if [ -z "${resolve_address}" ]
    then
        if [ "${host}" != "pihole.nameserv" ]
        then
            warn "${host} | failed to resolve"
            return
        fi
    fi
    good "${host} | ${fg[yellow]}${resolve_address}${reset_color}"
    ssh -q -t -o ConnectTimeout=2 "${host}" "${usrcommand}"
}

hosts=(all parallel "${hosts[@]}")

select host in "${hosts[@]}"; do
    if [ -n "${host}" ]; then
        break
    fi
done

if [ "${host}" = "all" ] || [ "${host}" = "parallel" ]
then
    if [ -z "${1}" ]
    then
        vared -p 'command to run: ' -c usrcommand
    else
        usrcommand="${1}"
    fi
    echo "${usrcommand}" | cowsay | lolcat
    for host in "${hosts[@]}"; do
        if [ "${host}" = "all" ] || [ "${host}" = "parallel" ]
        then
            continue
        fi
        if [ "${select_host}" = "parallel" ]; then
            (
                process_host "${host}" "${usrcommand}"
            ) &
        else
            process_host "${host}" "${usrcommand}"
        fi
    done
    if [ "${select_host}" = "parallel" ]; then
        wait
    fi
else
    ssh -q -t -o ConnectTimeout=2 "${host}" "${1}"
fi
